package battleField.client.main;

import DTO.codeObj.CodeObj;
import DTO.missionResult.MissionResult;
import DTO.team.Team;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.sun.org.apache.bcel.internal.classfile.Code;
import engine.Engine;
import engine.TheEngine;
import engine.decipherManager.DecipherManager;
import engine.entity.Agent;
import engine.entity.Allies;
import engine.entity.Entity;
import engine.entity.UBoat;
import engine.users.UserManager;
import javafx.util.Pair;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Main {

    private static final Object DMLock = new Object();

    public static void main(String[] args) {
        Engine engine = new TheEngine();
        engine.loadDataFromXML("C:\\Users\\micha\\IdeaProjects\\CTE-3-ClientServer\\engine\\src\\resources\\ex3-basic.xml");
        engine.setByAutoGeneratedCode();
        CodeObj code1 = engine.getInitialCode();
        engine.setByAutoGeneratedCode();
        CodeObj code2 = engine.getInitialCode();

//        System.out.println("code is: "+engine.getInitialCode());
//        String output = engine.processWord("Hello");
//        DecipherManager DM = new DecipherManager(engine.getDictionary(),engine.getMachine(),
//                engine.getStock(), engine.getDifficulty(), engine.getInitialCode(),output);
//        Allies allies = new Allies("Britain");
//        allies.createDM(engine.getDictionary(),engine.getMachine(),
//                engine.getStock(), engine.getDifficulty(), engine.getInitialCode(),output);
//        allies.getDM().setMissionSize(10);
//        Agent agent1 = new Agent("Bob", allies,3, 5);
//        Agent agent2 = new Agent("Alice", allies,2, 7);
//        allies.addAgent(agent1);
//        allies.addAgent(agent2);
//
//
//        new Thread(() -> allies.start(output, System.out::println)).start();
//        System.out.println("main ended");
        List<Pair<String,CodeObj>> candidates = new ArrayList<>();
        candidates.add(new Pair<>("agent1", code1));
        candidates.add(new Pair<>("agent2", code2));
        MissionResult result = new MissionResult(candidates, "Bob", 0);

//        UBoat uboat = new UBoat("Boat");
//
//        Allies ally1 = new Allies("bob");
//        Allies ally2 = new Allies("alice");

        Gson gson = new Gson();

//        uboat.addParticipant(ally1);
//        uboat.addParticipant(ally2);

        String json = gson.toJson(result);
        System.out.println("JSON: ");
        System.out.println(json);
        System.out.println("-----------");
        System.out.println("AND THEN:");

        Type type = new TypeToken<MissionResult>() { }.getType();
        MissionResult participants = gson.fromJson(json, type);
        System.out.println(participants);
    }

//    public static void puller(DecipherManager DM){
//        List<Runnable> missions = new LinkedList<>();
//        System.out.println("Using thread: "+ Thread.currentThread().getName());
////        try {
////            System.out.println(Thread.currentThread().getName()+" going to sleep");
////            Thread.sleep(3000);
////        } catch (InterruptedException e) {
////            System.out.println(Thread.currentThread().getName()+"was interrupted during sleep");
////        }
//
//        while (!Thread.currentThread().isInterrupted()){
//            int missionPullAmount = 5;
//            synchronized (DMLock){
//                while(!DM.getWorkQueue().isEmpty() && missionPullAmount > 0){
//                    --missionPullAmount;
//                    try {
//                        missions.add(DM.getWorkQueue().take());
//                    } catch (InterruptedException e) {
//                        System.out.println("interrupted...");
//                    }
//                }
//            }
//
//            System.out.println("pulled "+ missions.size()+" missions!");
//            missions.clear();
//        }
//    }
}
